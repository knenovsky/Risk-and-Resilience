"0","require(SHAPforxgboost)"
"0","modeliso10<-readRDS(iso10_model_path)"
"0","bestSEED<-modeliso10$Xgboost_summary %>% arrange(desc(Rsquared))"
"0","set.seed(bestSEED$SeedNum[1])"
"0",""
"0","Xgboostinput_complete_iso <-readRDS(paste0(""../data/03_data/XboostDfEiso.RDS""))"
"0","Xgboostinput_iso<-Xgboostinput_complete_iso%>% rename(""Country.Code""=`Country Code`,"
"0","                                                     ""Diabetes (%)"" =`Diabetetes (%)`,"
"0","                                                     ""COVID-19 cases""=`Covid cases per million`,"
"0","                                                     ""Comorbity""=`Comorbidity index` )"
"0",""
"0","dimred_250$incomegroup <- factor(dimred_250$`Income Group`, levels=c(""Low income"",""Lower middle income"",""Upper middle income"",""High income""))"
"0","additionalVariables<-dimred_250 %>% filter(year%in%2019)%>%  select(`Country Code`,incomegroup,NY.GDP.PCAP.CD) %>% "
"0","  mutate(incomegroup=case_when("
"0","    incomegroup%in%""Low income""~""LI"","
"0","    incomegroup%in%""Lower middle income""~""LMI"","
"0","    incomegroup%in%""Upper middle income""~""UMI"","
"0","    incomegroup%in%""High income""~""HI"","
"0","    TRUE~incomegroup))%>%  unique"
"0","additionalVariables$incomegroup <- factor(additionalVariables$incomegroup, levels=c(""LI"",""LMI"",""UMI"",""HI""))"
"0",""
"0","Label<-""p_value_mort"""
"0","features<-Xgboostinput_iso %>% select(-`Country.Code`,-p_value_mort) %>%  colnames()"
"0","features_iso<-Xgboostinput_iso %>% select(-`Country.Code`,-p_value_mort) %>%  colnames()"
"0","features_iso<-features_iso[grep(""cases|iso"",features_iso)]"
"0","Xgboostinput_iso<-Xgboostinput_iso %>% filter(!((`Country.Code`%in%""PER"")))"
"0","features<-features_iso"
"0","y_var <-  Label"
"0",""
"0","dataX <- as.matrix(Xgboostinput_iso %>% select(features))"
"0",""
"0","# hyperparameter tuning results"
"0","param_list <- list(objective = ""reg:squarederror"",  # For regression"
"0","  nrounds = c(100, 200, 300),  # Number of boosting rounds"
"0","  max_depth = c(3, 4, 5),     # Maximum tree depth"
"0","  eta = c(0.01, 0.1, 0.3),    # Learning rate"
"0","  gamma = c(0, 1, 10),       # L2 regularization"
"0"," colsample_bytree = c( 0.9,1),"
"0","  subsample = c(0.7, 0.8, 0.9),  # Subsample ratio"
"0","  min_child_weight = c(1, 5, 10)  # Minimum child weight"
"0","                   )"
"0","    "
"0",""
"0",""
"0","mod <- xgboost::xgboost(data = dataX, "
"0","                        label = as.matrix(Xgboostinput_iso[[y_var]]), "
"0","                        params = param_list, nrounds = 1000,"
"0","                        verbose = FALSE, nthread = 30,"
"0","                        early_stopping_rounds = 1000)"
"0","                       "
"0","# To return the SHAP values and ranked features by mean|SHAP|"
"0",""
"0","shap_values <- shap.values(xgb_model = mod, X_train = dataX)"
"0",""
"0",""
"0","shap_values$mean_shap_score %>%  sum()"
"1","[1]"
"1"," 17.26595"
"1","
"
"0","# The ranked features by mean |SHAP|"
"0","# shap_values$mean_shap_score %>% data.frame(freq= . ) %>%  arrange(desc(freq))"
"0","# ?"
"0","shap_values2<-shap_values$shap_score"
"0",""
"0",""
"0","plot_data <- shap.prep.stack.data(shap_contrib = shap_values2, top_n = 1, n_groups = 1)"
"2","The SHAP values of the Rest 10 features were summed into variable 'rest_variables'.

"
"0","plot_iso<-cbind(plot_data %>% arrange(ID),a=Xgboostinput_iso$Country.Code,b=Xgboostinput_iso$iso1)"
"0","# "
"0","muhara<-inner_join(plot_iso,additionalVariables,by=c(""a""=""Country Code""))"
"0",""
"0","plot_iso2<-muhara %>%  arrange(incomegroup,NY.GDP.PCAP.CD) %>% mutate(""e-Isomap""=rest_variables)%>%  mutate(sorted_id=1:n()) "
"0","aldender<-shap.plot.force_plot((plot_iso2 %>% select(-a,-b,-rest_variables,-NY.GDP.PCAP.CD,-incomegroup)), zoom_in_location = 295,y_zoomin_limit = c(-20,20))+scale_fill_viridis_d(begin = 0,end=0.5,"
"0","    name = ""Contribution"",na.translate = F)+theme(legend.position = ""None"")"
"2","Data has N = 346 | zoom in length is 50 at location 295.

"
"1","[38;5;236mScale for [32mfill[38;5;236m is already present.
Adding another scale for [32mfill[38;5;236m, which will replace the existing scale.[39m
"
"0","where<-plot_iso2 %>%  group_by(incomegroup) %>% summarise(regions=max(sorted_id))"
"0",""
"0","isoforcePLot<-shap.plot.force_plot((plot_iso2 %>% select(-a,-b,-rest_variables,-NY.GDP.PCAP.CD,-incomegroup)), zoom_in_location = 295,y_zoomin_limit = c(-20,20))+scale_fill_viridis_d(begin = 0,end=0.5,"
"0","    name = ""Contribution"",na.translate = F)+theme(legend.position = ""None"")+ geom_vline(xintercept =where$regions,color=""grey30"" ) + annotate(""text"", x = where$regions, y = 37, label = where$incomegroup, vjust = -1, hjust = 1)+scale_y_continuous(position = ""right"")"
"2","Data has N = 346 | zoom in length is 50 at location 295.

"
"1","[38;5;236mScale for [32mfill[38;5;236m is already present.
Adding another scale for [32mfill[38;5;236m, which will replace the existing scale.[39m
"
"0","isoforcePLot"
"2","Warning:"
"2"," [38;5;236mRemoved 4 rows containing missing values or values outside the scale range (`geom_text()`).[39m
"
