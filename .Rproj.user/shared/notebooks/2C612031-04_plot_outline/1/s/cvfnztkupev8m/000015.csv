"0","df_scaled<-Xgboostinput_iso[,-1] %>% scale() %>% data.frame()"
"0","df_scaled_withlabels<-cbind(Xgboostinput_iso[,1],Xgboostinput_iso[,-1])"
"0","colnames(df_scaled_withlabels)<-colnames(Xgboostinput_iso) "
"0",""
"0",""
"0","Xgboostinput_filtered<-df_scaled_withlabels%>%  filter(!(Country.Code%in% ""PER""))"
"0","set.seed(topruns$SeedNum[1])"
"0","features_iso<-Xgboostinput_filtered %>%  select(-p_value_mort,-Country.Code) %>%  colnames()"
"0","features_iso<-features_iso"
"0",""
"0","wdi_imputed_shaptable<-data.frame()"
"0","wdi_imputed_bootstrap<-data.frame()"
"0",""
"0",""
"0","# Split test training"
"0","  countries<-Xgboostinput_filtered$Country.Code %>%  unique"
"0","  test_proportion <- 0.8"
"0","  train_countries <- sample(countries, size = length(countries) * test_proportion)"
"0","  train_data <- Xgboostinput_filtered %>% filter(Country.Code%in% train_countries)"
"0","  test_data <- Xgboostinput_filtered %>% filter(!(Country.Code%in% train_countries))"
"0","  train_data$group <- as.numeric(factor(train_data$Country.Code))"
"0","  # Set up trainControl to perform group-wise cross-validation"
"0","  folds<-createFolds(train_data$group, k = 5, list = TRUE)"
"0","custom_control <- trainControl("
"0","    index = folds,"
"0","    method = ""repeatedcv"","
"0","    number = 10,"
"0","    repeats = 5, # Number of repetitions"
"0","    verboseIter = TRUE,allowParallel = F"
"0","  )"
"0","param_grid <- expand.grid("
"0","  nrounds = c(100, 200, 300),  # Number of boosting rounds"
"0","  max_depth = c(3, 4, 5),     # Maximum tree depth"
"0","  eta = c(0.01, 0.1, 0.3),    # Learning rate"
"0","  gamma = c(0, 1, 10),       # L2 regularization"
"0","  colsample_bytree = c( 0.9,1),"
"0","  subsample = c(0.7, 0.8, 0.9),  # Subsample ratio"
"0","  min_child_weight = c(1, 5, 10)  # Minimum child weight"
"0",")"
"0","Sys.setenv(OPENBLAS_NUM_THREADS = 1)"
"0","doMC::registerDoMC(1)"
"0","library(doParallel)"
"0",""
"0",""
"0","cluster <- makeForkCluster(30)"
"0","registerDoParallel(cluster)"
"0",""
"0","  # Test different parameters"
"0","xgb_caret_wdi_raw <- caret::train("
"0","  x = train_data %>% dplyr::select(features_iso),"
"0","  y = train_data %>% pull(Label),"
"0","  method = ""xgbTree"","
"0","  #tuneGrid = param_grid,"
"0","  #trControl = custom_control,"
"0","  #tuneLength = 1000,"
"0","  verbosity = 1"
"0",")"
"2","Warning:"
"2"," [38;5;236mUsing an external vector in selections was deprecated in tidyselect 1.1.0.
[36mâ„¹[38;5;236m Please use `all_of()` or `any_of()` instead.
  # Was:
  data %>% select(features_iso)

  # Now:
  data %>% select(all_of(features_iso))

See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
[90mThis warning is displayed once every 8 hours.[38;5;236m
[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.[38;5;236m[39m
"
